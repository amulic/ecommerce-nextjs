// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(ulid())
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  role          Role      @default(USER)
  orders        Order[]
  reviews       Review[]
  Cart          Cart[]
}

model Session {
  id        String   @id @default(ulid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id @default(ulid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String    @id @default(ulid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Product {
  id          String      @id @default(ulid())
  name        String
  description String?
  price       Float
  sku         String      @unique
  inventory   Int         @default(0)
  isActive    Boolean     @default(true)
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categories  Category[]
  reviews     Review[]
  orderItems  OrderItem[]
  polarId     String?
  CartItem    CartItem[]
}

model CartItem {
  id        String   @id @default(ulid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Cart {
  id                String     @id @default(ulid())
  userId            String
  user              User       @relation(fields: [userId], references: [id])
  items             CartItem[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  checkoutSessionId String?    @unique
}

model Category {
  id          String   @id @default(ulid())
  name        String   @unique
  description String?
  slug        String   @unique
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?
}

model Review {
  id        String   @id @default(ulid())
  rating    Int
  comment   String?
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String        @id @default(ulid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  status          OrderStatus   @default(PENDING)
  totalAmount     Float
  shippingAddress String?
  billingAddress  String?
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderItems      OrderItem[]
}

model OrderItem {
  id        String  @id @default(ulid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Role {
  USER
  EMPLOYEE
  ADMIN
}
